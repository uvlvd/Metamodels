/*
 * generated by Xtext 2.34.0
 */
package org.xtext.lua;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.linking.ILinkingDiagnosticMessageProvider;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.parsetree.reconstr.ITransientValueService;
import org.eclipse.xtext.resource.DerivedStateAwareResource;
import org.eclipse.xtext.resource.DerivedStateAwareResourceDescriptionManager;
import org.eclipse.xtext.resource.IDerivedStateComputer;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.XtextResource;
import org.xtext.lua.converters.LuaValueConverterService;
import org.xtext.lua.linking.LuaLinkingDiagnosticMessageProvider;
import org.xtext.lua.postprocessing.LuaDerivedStateComputer;
import org.xtext.lua.scoping.LuaQualifiedNameProvider;
import org.xtext.lua.serialization.LuaTransientValueService;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
public class LuaRuntimeModule extends AbstractLuaRuntimeModule {
	/**
	 * Bind custom value converter to handle the conversion of parsed Lua values,
	 * e.g. hex numbers.
	 */
	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return LuaValueConverterService.class;
	}

	/**
	 * Bind custom linking message provider to disable error messages for unresolved
	 * references in the context of assignments (left-hand side cross-references
	 * need to be ignored, since they denote declarations).
	 */
	public Class<? extends ILinkingDiagnosticMessageProvider> bindILinkingDiagnosticMessageProvider() {
		return LuaLinkingDiagnosticMessageProvider.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return LuaQualifiedNameProvider.class;
	}
	/**
	 * LuaTransientValueService marks derived "name" attributes as transient s.t. they are ignored by the serialization.
	 */
	@Override
	public Class<? extends ITransientValueService> bindITransientValueService() {
		return LuaTransientValueService.class;
	}
	
	//TODO: maybe not used
	/*
	public Class<? extends ICrossReferenceSerializer> bindICrossReferenceSerializer()  {
		return LuaCrossReferenceSerializer.class;
	}
	*/

	// public Class<? extends IXtext2EcorePostProcessor>
	// configureIXtext2EcorePostProcessor() {
	// return LuaXtext2EcorePostProcessor.class;
	// }
	
	/**
	 * DerivedStateComputer, -Resource and -ResourceDescriptionManager are used to set "name" attributes where
	 * "name" attribute is null (i.e. for Referencing objects that are also Referenceable).
	 * 
	 */
	public Class<? extends IDerivedStateComputer> bindIDerivedStateComputer() {
		return LuaDerivedStateComputer.class;
	}

	// Not needed for Xbase-projects
	@Override
	public Class<? extends XtextResource> bindXtextResource() {
		return DerivedStateAwareResource.class;
	}

	// Not needed for Xbase-projects
	public Class<? extends IResourceDescription.Manager> bindIResourceDescriptionManager() {
		return DerivedStateAwareResourceDescriptionManager.class;
	}

}
