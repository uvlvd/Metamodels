/*
 * generated by Xtext 2.34.0
 */
package org.xtext.lua;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.diagnostics.IDiagnosticConsumer;
import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.linking.ILinkingDiagnosticMessageProvider;
import org.eclipse.xtext.linking.ILinkingService;
import org.eclipse.xtext.linking.impl.LinkingDiagnosticProducer;
import org.eclipse.xtext.linking.lazy.LazyLinker;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.parsetree.reconstr.ITransientValueService;
import org.eclipse.xtext.resource.DerivedStateAwareResource;
import org.eclipse.xtext.resource.DerivedStateAwareResourceDescriptionManager;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.resource.IDerivedStateComputer;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.impl.ImportUriResolver;
import org.eclipse.xtext.util.concurrent.IUnitOfWork;
import org.xtext.lua.converters.LuaValueConverterService;
import org.xtext.lua.linking.LuaLinker;
import org.xtext.lua.linking.LuaLinkingDiagnosticMessageProvider;
import org.xtext.lua.linking.LuaLinkingService;
import org.xtext.lua.lua.LuaFactory;
import org.xtext.lua.postprocessing.LuaDerivedStateComputer;
import org.xtext.lua.scoping.LuaGlobalScopeProvider;
import org.xtext.lua.scoping.LuaImportUriResolver;
import org.xtext.lua.scoping.LuaQualifiedNameConverter;
import org.xtext.lua.scoping.LuaQualifiedNameProvider;
import org.xtext.lua.scoping.LuaResourceDescriptionStrategy;
import org.xtext.lua.serialization.LuaTransientValueService;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
public class LuaRuntimeModule extends AbstractLuaRuntimeModule {
	/**
	 * Bind custom value converter to handle the conversion of parsed Lua values,
	 * e.g. (hex) numbers.
	 */
	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return LuaValueConverterService.class;
	}

	/**
	 * Bind custom linking message provider to disable error messages for unresolved
	 * references in the context of assignments (left-hand side cross-references
	 * need to be ignored, since they denote declarations).
	 */
	public Class<? extends ILinkingDiagnosticMessageProvider> bindILinkingDiagnosticMessageProvider() {
		return LuaLinkingDiagnosticMessageProvider.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return LuaQualifiedNameProvider.class;
	}
	
	//public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
	//	return LuaQualifiedNameConverter.class;
	//}
	
	//public LuaFactory bindLuaFactoryToInstance() {
	//	return LuaFactory.eINSTANCE;
	//}
	
	/**
	 * LuaTransientValueService marks derived "name" attributes as transient s.t. they are ignored by the serialization.
	 */
	// TODO: check what this does now, probably set "ref" cross-references and some "name" attributes to null
	@Override
	public Class<? extends ITransientValueService> bindITransientValueService() {
		return LuaTransientValueService.class;
	}
	
	@Override
	public Class<? extends ILinkingService> bindILinkingService() {
		return LuaLinkingService.class;
	}
	
	//@Override
	//public Class<? extends ILinker> bindILinker() {
	//	return LuaLinker.class;
	//}
	
	//TODO: maybe not used
	/*
	public Class<? extends ICrossReferenceSerializer> bindICrossReferenceSerializer()  {
		return LuaCrossReferenceSerializer.class;
	}
	*/

	// public Class<? extends IXtext2EcorePostProcessor>
	// configureIXtext2EcorePostProcessor() {
	// return LuaXtext2EcorePostProcessor.class;
	// }
	
	/**
	 * DerivedStateComputer, -Resource and -ResourceDescriptionManager are used to set "name" attributes where
	 * "name" attribute is null (i.e. for Referencing objects that are also Referenceable).
	 * 
	 */
	public Class<? extends IDerivedStateComputer> bindIDerivedStateComputer() {
		return LuaDerivedStateComputer.class;
	}

	// Not needed for Xbase-projects
	@Override
	public Class<? extends XtextResource> bindXtextResource() {
		return DerivedStateAwareResource.class;
	}

	// Not needed for Xbase-projects
	public Class<? extends IResourceDescription.Manager> bindIResourceDescriptionManager() {
		return DerivedStateAwareResourceDescriptionManager.class;
	}
	
	/**
	 * Bind a custom ResourceDescriptionStrategy for Lua,
	 * sed to create descriptions for elements that should be visible from without a resource (i.e. for global scoping).
	 * @return
	 */
	public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
        return LuaResourceDescriptionStrategy.class;
    }
	
    @Override
    public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
        return LuaGlobalScopeProvider.class;
    }
    
    public Class<? extends ImportUriResolver> bindImportUriResolver() {
        return LuaImportUriResolver.class;
    }

	

}
