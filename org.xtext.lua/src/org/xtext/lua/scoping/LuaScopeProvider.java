/*
 * generated by Xtext 2.34.0
 */
package org.xtext.lua.scoping;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.linking.impl.LinkingHelper;
import org.eclipse.xtext.linking.lazy.SyntheticLinkingSupport;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.xtext.lua.Config;
import org.xtext.lua.linking.SyntheticExpNil;
import org.xtext.lua.lua.Assignment;
import org.xtext.lua.lua.Block;
import org.xtext.lua.lua.Exp;
import org.xtext.lua.lua.ExpList;
import org.xtext.lua.lua.Feature;
import org.xtext.lua.lua.FunctionDeclaration;
import org.xtext.lua.lua.LuaFactory;
import org.xtext.lua.lua.LuaPackage.Literals;
import org.xtext.lua.lua.MemberAccess;
import org.xtext.lua.lua.Referenceable;
import org.xtext.lua.lua.Referencing;
import org.xtext.lua.lua.Stat;
import org.xtext.lua.lua.TableAccess;
import org.xtext.lua.lua.TableConstructor;
import org.xtext.lua.lua.Var;
import org.xtext.lua.utils.LinkingAndScopingUtils;

import com.google.inject.Inject;
import com.google.inject.Scope;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class LuaScopeProvider extends AbstractLuaScopeProvider {
	@Inject
	private IQualifiedNameProvider qualifiedNameProvider;
	
  	@Inject
    private IQualifiedNameConverter nameConverter;
  	
	@Inject 
	private LinkingHelper linkingHelper;
	
	@Inject
	private SyntheticLinkingSupport linkingSupport;
	
	@Inject
	private LuaFactory luaFactory = LuaFactory.eINSTANCE;
    
	
	/**
	 * NOTE: Always create IEObjectDescriptions using the qualifiedNameConverter when creating
	 * Scopes, see {@link #createDescriptionsForCandidates(Collection)}.
	 */
    @Override
    public IScope getScope(final EObject context, final EReference reference) {
        if (context == null) {
            // nothing todo without context
            return IScope.NULLSCOPE;
        }
        
        var scopeRoot = EcoreUtil2.getRootContainer(context);
        
        if (LinkingAndScopingUtils.isAssignable(context)) {
        	return getScopeForAssignable(context);
        }

        if (context instanceof Referencing referencing) {
        	final var contextFqn = qualifiedNameProvider.getFullyQualifiedName(context);

        	//TODO: it seems that the lazy linking happens before the DerivedStateComputer
        	// 	installs the derived state, thus the name is null.
        	//  need to change that somewhere...?
        	if (contextFqn == null) {
        		return IScope.NULLSCOPE;
        	}
        	
        	var referenceables = getReferenceables(scopeRoot, context);
        	var candidates = findCandidatesInAssignablesforFqn(contextFqn, referenceables);
        	
        	return new SimpleScope(createDescriptionsForCandidates(candidates, context));
        }
    
        // TODO: parentBlocks, Functions etc.
        var parentBlock = EcoreUtil2.getContainerOfType(context.eContainer(), Block.class);
        if (parentBlock == null) {
            // if we have no parent anymore we delegate to the global scope
        	//System.out.println("TODO: Implement global scope");
        	//System.out.println(context);
        	return super.getScope(context, reference); // TODO: just for debug, remove
            //return super.getGlobalScope(context.eResource(), reference);
        }
        
        //System.out.println("current context: " + context);
        //System.out.println("context parent: " + context.eContainer());
        var parentStatement = EcoreUtil2.getContainerOfType(context, Stat.class);
        //var blockScope = getScopeOfBlock(parentBlock, context, parentStatement, reference);
        //return blockScope;
        return IScope.NULLSCOPE;
        
        
        /*
        var scope = super.getScope(context, reference);
        var temp = new ArrayList<IEObjectDescription>();
        scope.getAllElements().forEach(temp::add);
        if (temp.isEmpty()) {
        	System.out.println("Scope empty for obj: " + context);
        }
        return super.getScope(context, reference); // TODO: just for debug, remove
        */
    }

    /**
     * Returns the Scope for assignables. Assignables are Referenceables on the lhs of an Assignment,
     * and the returned Scope contains a single candidate: the corresponding value expression on the rhs of the Assignment. </br>
     * If there is no corresponding value expression (e.g. a, b = 1), a new ExpNil is created and set as reference (in the e.g. b).
     * @param assignable
     * @return
     */
    private IScope getScopeForAssignable(EObject assignable) {
    	final var name = ((Referenceable) assignable).getName();
		if (name == null) { // name might be null, e.g. for TableAccess with unresolvable indexExpression
			// TODO: return placeholder object or implement trivial recovery
			// TODO: name should not be null anymore, since TableAccesses get a dummy name?
			return IScope.NULLSCOPE;
		}
		
    	final var fqn = nameConverter.toQualifiedName(name);
    	final var value = LinkingAndScopingUtils.findAssignedExp((Feature) assignable);
		if (value == null) {
			// create synthetic nil value if ExpList does not contains value for assignable
			var nilValue = new SyntheticExpNil();
			var nilValueDescription = EObjectDescription.create(fqn, nilValue);
			return new SimpleScope(Collections.singletonList(nilValueDescription));
		} else {
			// any assignable is also a Referenceable which has a name attribute and a
			// cross-reference with linkText == name

			// we create a description with the name of the assignable and the corresponding value expression on the rhs of the assignment
			// => the scope for the assignable contains only this description
			var assignedValueDescription = EObjectDescription.create(fqn, value);
			return new SimpleScope(Collections.singletonList(assignedValueDescription));
		}
    }

    // For functions, this could be a problem here: https://stackoverflow.com/questions/12291203/lua-how-to-call-a-function-prior-to-it-being-defined
    //  (could also affect Assignments)
    private Collection<Referenceable> getReferenceables(final EObject scopeRoot, final EObject context) {
    	var contextParentStatementOpt = LinkingAndScopingUtils.getParentStatement(context);
    	if (!contextParentStatementOpt.isPresent()) {
    		System.out.println("Found no contextParentStatement for obj " + context);
    		return Collections.emptyList();
    	}
    	var contextParentStatement = contextParentStatementOpt.get();
    	
    	List<Referenceable> referenceables = EcoreUtil2.getAllContentsOfType(scopeRoot, Block.class)
    							.stream()
    							// we need to get the statements by iterating over the block contents, since PrefixExps also extend Stat
    							.flatMap(block -> block.getStats().stream())
    							//only consider Statements before the Statement the context is contained in
    							.takeWhile(stat -> !EcoreUtil.isAncestor(contextParentStatement, stat))
    							.flatMap(stat -> LinkingAndScopingUtils.getReferenceablesFromStat(stat).stream())
    							.filter(refble -> {
    								// Referenceables in assignments need to be checked for their position (on the lhs)
    								if (EcoreUtil2.getContainerOfType(refble, Assignment.class) != null) {
    									return LinkingAndScopingUtils.isAssignable(refble);
    								}
    								// all other Referenceables are ok
    								return true;
    							})
    							// collect to new ArrayList s.t. resulting Collection is mutable and can be reversed
    							.collect(Collectors.toCollection(() -> new ArrayList<Referenceable>()));
    	

    	// reverse result s.t. the last assignment before the currently considered context is the first element in the resulting candidate list
    	Collections.reverse(referenceables);
    	return referenceables;
    }
    // TODO: should probably only consider assiganbles in STATEMENTS before current context, not Assignments
    //    (since e.g. function declarations should also be considered, but are not part of Assignments)

    // For functions, this could be a problem here: https://stackoverflow.com/questions/12291203/lua-how-to-call-a-function-prior-to-it-being-defined
    //  (could also affect Assignments)
    private Collection<Referenceable> getAssignablesFromFor(final EObject scopeRoot, final EObject context) {
    	var assignments = EcoreUtil2.getAllContentsOfType(scopeRoot, Assignment.class);
    	
    	
    	//TODO: could implement function declarations like this with just using the fqn of the function name,
    	//     this would assume that the resolution of the "path" before a function name like function a.b.func()
    	//     is not necessary because the resolution of "func" would search for a and b anyways (without having to resolve them
    	//     individually)
    	var functionDeclarations = EcoreUtil2.getAllContentsOfType(scopeRoot, FunctionDeclaration.class);
    	functionDeclarations.forEach(fd -> System.out.println(qualifiedNameProvider.getFullyQualifiedName(fd).getSegments()));
    	
    	List<Referenceable> assignables = assignments.stream()
    			 // ignore the assignment that the context object is part of (e.g.: a = a, the lhs a is not a candidate for the rhs a),
    			 // as well as all assignments that occur in statements after the context's statement 
    			 .takeWhile(assignment -> !EcoreUtil.isAncestor(assignment, context))
    			 // the rest of this stream pipeline gets the Referenceable objects from the lhs of the assignments
				 .map(assignment ->  EcoreUtil2.getAllContentsOfType(assignment, Referenceable.class))
				 .flatMap(List::stream)
				 .filter(obj -> LinkingAndScopingUtils.isAssignable(obj))
				 // collect to new ArrayList s.t. resulting Collection is mutable and can be reversed
				 .collect(Collectors.toCollection(() -> new ArrayList<Referenceable>()));
    	// reverse result s.t. the last assignment before the currently considered context is the first element in the resulting candidate list
    	Collections.reverse(assignables);
    	return assignables;
    }
    
	// function findCandidatesInPathForFqn(fqn) that searches for feature candidates by fqn:
	// 1. Add all candidates with contextFqn.equals(candidateFqn) to result
    // 2.1 find all candidates with contextFqn.startsWith(candidateFqn)
	// 2.2 filter by: candidate.pointsToTable() 
	// 3. forall candidates if pointsToTable: 
    //    3.1 newFqnHead = candidate.getRef().getFqn()  // quit here if cannot be resolved
	//    3.2 contextFqnTail = contextFqn.remove(candidateFqn)
	//    3.3 furtherCandidates = findCandidatesInPathByFqn(newFqnHead + contextFqnTail)
	// 	  3.4 add result as description with (candidate.getFqn() + contextFqnTail, furtherCandidate)
	// 4. return candidates
    /**
     * 
     * @param contextFqn
     * @param context
     * @param scopeRoot
     * @return
     */
    //private Collection<Referenceable> findCandidatesInPathForFqn(QualifiedName contextFqn, final EObject context, final EObject scopeRoot) {
    //	var assignables = getAssignablesFromFor(scopeRoot, context);
    private Collection<Referenceable> findCandidatesInAssignablesforFqn(final QualifiedName contextFqn, final Collection<Referenceable> assignables) {
    	var result = new ArrayList<Referenceable>();

    	for (final var assignable : assignables) {
    		
    		final var assignableFqn = qualifiedNameProvider.getFullyQualifiedName(assignable);
    		
    		
    		if (contextFqn.equals(assignableFqn)) { // add all assignables with equal fqn
    			result.add(assignable);
    		} else if (contextFqn.startsWith(assignableFqn) && assignable instanceof Referencing) {
    			// search candidates in partial feature paths, 
    			// e.g.: b.member = 1; a.x = b; c = a.x.member; here, the candidates for a.x.member need to consider b.member
        		final var assignedRef = (((Referencing) assignable).getRef()); // rhs of assignable (might be a Referencing)
    			final var assignedValue = LinkingAndScopingUtils.tryGetAssignedValueFrom((Referencing) assignable); // value of assignable (is not Referencing)
	
        		if (assignedValue instanceof TableConstructor && assignedRef instanceof Referencing) {
        			var newFqnHead = qualifiedNameProvider.getFullyQualifiedName(assignedRef);
        			var newFqnTail = getFqnTail(contextFqn, assignableFqn.getSegmentCount());
        			var newFqn = newFqnHead.append(newFqnTail);
        			
        			result.addAll(findCandidatesInAssignablesforFqn(newFqn, assignables)
        				.stream()
        				.toList()
        			);
        			
        		}
        		
    		}
    	}

    	return result;
    }
    
    private QualifiedName getFqnTail(QualifiedName forFqn, int startIndex) {
    	var resultSegments = new ArrayList<String>();
    	for (var i = 0; i < forFqn.getSegmentCount(); i++) {
    		if (i >= startIndex) {
    			resultSegments.add(forFqn.getSegment(i));
    		}
    	}
    	
    	if (resultSegments.isEmpty()) {
    		throw new RuntimeException("Cannot get tail for " + forFqn + " with startIndex " + startIndex + "!");
    	}
    	
    	var result = nameConverter.toQualifiedName(resultSegments.get(0));
    	for (int i = 1; i < resultSegments.size(); i++) {
    		result = result.append(resultSegments.get(i));
    	}

    	return result;
    }
    
    /**
     * We always need to create descriptions (instead of returning Scopes.scopeFor(candidates)), since the 
     * candidates name might contain ".", which would fail to match the QualifiedName generated from the cross-reference
     * in the DefaultLinkingService.</br>
     * This is because the qualifiedNameConverter uses "." to separate Strings, i.e.
     * the generated cross-reference QualifiedName for "hello.world" would be "hello" "world", which would not match
     * the candidate's name "hello.world".</br></br>
     * 
     * An alternative would be to extend the IQualifiedNameConverter.DefaultImpl and change/remove the delimiter.</br></br>
     * 
     * For MemberAccess (e.g. a.member), we need to remove the quotes from the candidates name,
     * since the candidates may be TableAccesses with StringLiterals as indexExp, which have leading and trailing quotes,
     * see LuaQualifiedNameProvider). </br>
     * 
     * E.g. MemberAccess "member" in "a.member" has name "member", while candidate a["member"] has the name ""member"". 
     * @param candidates The candidates.
     * @return A list of EObjectDescriptions of the candidates, created by applying the qualifiedNameConverter to the candidate's name attribute.
     */
    private Collection<IEObjectDescription> createDescriptionsForCandidates(Collection<Referenceable> candidates, EObject context) {
    	return candidates.stream()
    				.map(c ->{
    					var name = c.getName();
    					if (c instanceof FunctionDeclaration fd) {
    						name = getLastSegmentFromFunctionDeclarationName(fd);
    					}
    					if (context instanceof MemberAccess ma) {
    						name = LinkingAndScopingUtils.removeQuotesFromString(name);
    					}
    					return EObjectDescription.create(nameConverter.toQualifiedName(name), c);
    				})
    				.toList();
    }

    private String getLastSegmentFromFunctionDeclarationName(FunctionDeclaration fd) {
    	var qn = nameConverter.toQualifiedName(fd.getName());
    	return qn.getLastSegment();
    } 
    
}
